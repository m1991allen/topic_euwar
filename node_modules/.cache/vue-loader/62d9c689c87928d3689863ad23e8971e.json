{"remainingRequest":"/Users/news/Desktop/source/topic_euwar/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/news/Desktop/source/topic_euwar/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/news/Desktop/source/topic_euwar/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/news/Desktop/source/topic_euwar/src/components/Section3.vue?vue&type=template&id=4c1bd71e&scoped=true&","dependencies":[{"path":"/Users/news/Desktop/source/topic_euwar/src/components/Section3.vue","mtime":1646643288982},{"path":"/Users/news/Desktop/source/topic_euwar/node_modules/cache-loader/dist/cjs.js","mtime":1644917916560},{"path":"/Users/news/Desktop/source/topic_euwar/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644917918092},{"path":"/Users/news/Desktop/source/topic_euwar/node_modules/cache-loader/dist/cjs.js","mtime":1644917916560},{"path":"/Users/news/Desktop/source/topic_euwar/node_modules/vue-loader/lib/index.js","mtime":1644917917658}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}